---
description: 
globs: 
alwaysApply: false
---
# Cursor最適化ガイド - Mastra開発効率向上

## 🎯 目的

このガイドは、CursorでMastraフレームワークを使用した開発において、AIアシスタントを最大限活用するための具体的な手法をまとめています。

## 🤖 効果的なプロンプト例

### エージェント作成のプロンプト

```
Mastraフレームワークを使用して、以下の仕様のエージェントを作成してください：

**エージェント名**: GitLabAnalysisAgent
**目的**: GitLabリポジトリのソースコードを解析し、技術要件を抽出
**主な機能**:
- TypeScriptプロジェクトの構造分析
- 依存関係の抽出
- 複雑度の評価

**要件**:
- OpenAI GPT-4o-miniを使用
- runtimeContextで分析深度を動的に変更
- 型安全なツール連携
- メモリ機能付き
- 適切なエラーハンドリング

参考として、以下のMastraパターンに従ってください：
- Agent構成は `@mastra/core/agent` を使用
- ツールは `createTool` で定義
- スキーマはZodで型定義
- ランタイムコンテキストは適切に型付け
```

### ツール作成のプロンプト

```
MastraフレームワークのcreateToolを使用して、以下のGitLab APIツールを実装してください：

**ツール名**: fetchGitLabFiles
**機能**: GitLabプロジェクトのファイル一覧を取得し、TypeScript/JavaScriptファイルを特定
**入力パラメータ**:
- projectId (string): GitLabプロジェクトID
- path (string, optional): 特定のディレクトリパス
- includeContent (boolean, optional): ファイル内容も取得するか

**出力スキーマ**:
- files: ファイル情報の配列（名前、タイプ、パス、言語）
- totalFiles: ファイル総数
- languages: 言語別ファイル数

**実装要件**:
- runtimeContextからGitLabアクセストークンを取得
- 適切なエラーハンドリング（認証エラー、API制限など）
- TypeScript型安全性の確保
- レート制限に配慮したAPI呼び出し
```

### ワークフロー作成のプロンプト

```
Mastraワークフローを作成してください：

**ワークフロー**: SlackからGitLab分析までの自動要件定義生成
**フロー**:
1. Slackメッセージ解析（parseSlackRequest）
2. GitLabリポジトリ分析（analyzeCodebase）
3. 要件定義生成（generateRequirements）
4. 結果のSlack投稿（postToSlack）

**実装詳細**:
- 各ステップは適切なスキーマで型定義
- エラー時はSlackに通知
- 並列実行可能な部分は `.parallel()` を使用
- ステップ間のデータマッピングは `.map()` で明示的に定義
- suspend/resume機能で人間の承認フローを含める

既存のMastraプロジェクト構造に合わせて、適切なディレクトリ配置で実装してください。
```

## 🛠️ コード生成パターン

### 1. コンポーネント単位でのプロンプト

**悪い例**:
```
Mastraエージェントを作って
```

**良い例**:
```
以下の仕様でMastraエージェントを実装：
- 名前: RequirementAnalyzer
- モデル: OpenAI GPT-4o
- メモリ: LibSQLStore使用
- ツール: slackParser, gitlabAnalyzer
- 型定義: Zod schema適用
- エラーハンドリング: カスタムエラークラス使用

プロジェクトの既存パターンに合わせ、適切なJSDocコメントを含めてください。
```

### 2. ファイル構造を明示

```
以下のディレクトリ構造でMastraワークフローを実装してください：

src/mastra/workflows/
├── requirement-analysis.ts      # メインワークフロー
├── steps/
│   ├── slack-parser.ts         # Slack解析ステップ
│   ├── gitlab-analyzer.ts      # GitLab分析ステップ
│   └── requirement-generator.ts # 要件生成ステップ
└── types/
    └── workflow-types.ts       # ワークフロー用型定義

各ファイルの実装を、既存の命名規則とコーディングスタイルに合わせて生成してください。
```

### 3. 実装コンテキストの提供

```
現在のプロジェクトは要件定義自動生成システムです。以下のMastraエージェントをリファクタリング：

**現在の問題**:
- エラーハンドリングが不十分
- ランタイムコンテキストが型安全でない
- メモリ設定が適切でない

**改善目標**:
- 統一されたエラーハンドリング戦略
- 型安全なランタイムコンテキスト
- 永続的なメモリストレージ

プロジェクトルールとTypeScriptガイドラインに準拠してください。
```

## 🔍 デバッグ支援プロンプト

### エラー診断

```
以下のMastraエージェント実行時エラーを診断・修正してください：

**エラーメッセージ**: [具体的なエラーメッセージ]
**発生箇所**: [ファイル名と行番号]
**実行状況**: [どの操作中に発生したか]

**期待される動作**: [本来の期待動作]
**現在のコード**: [問題のあるコード部分]

Mastraフレームワークの仕様とベストプラクティスに基づいて、根本原因の特定と修正案を提示してください。
```

### パフォーマンス最適化

```
以下のMastraワークフローのパフォーマンスを分析・最適化してください：

**問題**: ワークフロー実行が遅い（XX秒かかる）
**ボトルネック予想箇所**: [具体的なステップやAPI呼び出し]

**最適化観点**:
- 並列実行の活用
- API呼び出しの効率化
- メモリ使用量の最適化
- 不要な処理の除去

Mastraのベストプラクティスに沿った改善案を提示してください。
```

## 📝 コードレビュー支援

### レビュー依頼プロンプト

```
以下のMastraコードをレビューしてください：

**チェック項目**:
1. プロジェクトルール準拠（命名規則、ファイル構成）
2. TypeScript型安全性
3. Mastraフレームワーク最適利用
4. エラーハンドリング適切性
5. テスタビリティ
6. セキュリティ考慮事項

**コード**: [レビュー対象コード]

改善点があれば、具体的な修正案と理由を提示してください。
```

## 🧪 テスト生成支援

### テストケース生成

```
以下のMastraエージェントに対する包括的なテストスイートを生成してください：

**テスト対象**: [エージェント/ツール/ワークフロー名]
**機能**: [主要機能の説明]

**必要なテストケース**:
- 正常系テスト（成功パターン）
- 異常系テスト（エラーハンドリング）
- エッジケース（境界値、null値など）
- 統合テスト（他コンポーネントとの連携）
- パフォーマンステスト

Jest、Mastraテストユーティリティ、モックライブラリを適切に使用してください。
```

## 🔧 リファクタリング支援

### コード改善プロンプト

```
以下のMastraコードを、プロジェクトのルールとベストプラクティスに合わせてリファクタリングしてください：

**改善目標**:
- 可読性向上
- 保守性向上
- パフォーマンス最適化
- 型安全性強化

**制約条件**:
- 既存APIの互換性維持
- 既存テストを破壊しない
- プロジェクトルール準拠

**対象コード**: [リファクタリング対象]

変更理由と影響範囲を明確に説明してください。
```

## 📚 学習・調査支援

### 実装方法調査

```
Mastraフレームワークで以下を実装する最適な方法を調査・提案してください：

**実装したい機能**: [具体的な機能]
**技術要件**: [パフォーマンス、スケーラビリティなど]
**制約**: [使用可能なリソース、ライブラリなど]

**調査項目**:
- Mastra公式ドキュメントの関連情報
- ベストプラクティス
- 実装パターン
- 潜在的な問題と回避策

具体的なコード例と共に提案してください。
```

## 🎨 UI/UX改善支援

### プレイグラウンドUI改善

```
Mastraの開発者体験を向上させるため、以下のUI改善を実装してください：

**改善対象**: [プレイグラウンド、管理画面など]
**目標**: [ユーザビリティ向上、開発効率化など]

**要件**:
- レスポンシブデザイン
- アクセシビリティ配慮
- 直感的なUX
- Mastraの既存デザインシステムに準拠

React/Next.jsのベストプラクティスを適用してください。
```

## 📋 定型作業自動化

### ボイラープレート生成

```
以下の仕様でMastraコンポーネントのボイラープレートを生成してください：

**コンポーネント種類**: [Agent/Tool/Workflow]
**名前**: [具体的な名前]
**機能概要**: [簡潔な機能説明]

**生成内容**:
- TypeScript実装ファイル
- 型定義ファイル
- テストファイル
- ドキュメントファイル（README）

プロジェクトの規約に沿った構造で、必要な依存関係とインポート文を含めてください。
```

## 🔄 継続的改善

### 定期的な品質チェック

```
プロジェクト全体のMastraコード品質を評価し、改善提案をしてください：

**評価観点**:
- コード重複の検出
- 未使用コードの特定
- パフォーマンス問題の発見
- セキュリティ脆弱性の確認
- ドキュメント不備の指摘

**改善プロセス**:
1. 問題の優先度付け
2. 具体的な修正計画
3. 実装ガイドライン
4. 検証方法

実行可能な改善ロードマップを提示してください。
```

---

このガイドを活用することで、CursorでのMastra開発において、AIアシスタントの能力を最大限に引き出し、効率的で高品質なコード開発が可能になります。 