---
description: 
globs: 
alwaysApply: false
---
# Mastraクイックリファレンス

## 🚀 セットアップ

### 基本パッケージインストール

```bash
pnpm add @mastra/core@latest @ai-sdk/openai zod
pnpm add @mastra/loggers@latest @mastra/libsql@latest -D
```

### 環境変数設定

```bash
# .env
OPENAI_API_KEY=your_openai_api_key
SLACK_BOT_TOKEN=xoxb-your-slack-token
GITLAB_ACCESS_TOKEN=glpat-your-gitlab-token
DATABASE_URL=file:./mastra.db
LOG_LEVEL=info
```

## 🤖 エージェント

### 基本エージェント

```typescript
import { Agent } from "@mastra/core/agent";
import { openai } from "@ai-sdk/openai";

export const myAgent = new Agent({
  name: "MyAgent",
  instructions: "あなたは〜です。",
  model: openai("gpt-4o-mini"),
});
```

### メモリ付きエージェント

```typescript
import { Memory } from "@mastra/memory";
import { LibSQLStore } from "@mastra/libsql";

const agent = new Agent({
  name: "MemoryAgent",
  instructions: "履歴を記憶します。",
  model: openai("gpt-4o"),
  memory: new Memory({
    storage: new LibSQLStore({ url: "file:./memory.db" }),
  }),
});

// 使用時
await agent.generate("質問", {
  resourceId: "user_123",
  threadId: "conversation_456",
});
```

### 動的エージェント

```typescript
export const dynamicAgent = new Agent({
  name: "DynamicAgent",
  instructions: ({ runtimeContext }) => {
    const userType = runtimeContext.get("user-type");
    return userType === "admin" 
      ? "管理者向けの指示"
      : "一般ユーザー向けの指示";
  },
  model: ({ runtimeContext }) => {
    return runtimeContext.get("user-type") === "premium"
      ? openai("gpt-4o")
      : openai("gpt-4o-mini");
  },
});
```

## 🔧 ツール

### 基本ツール

```typescript
import { createTool } from "@mastra/core/tools";
import { z } from "zod";

export const myTool = createTool({
  id: "my-tool-id",
  description: "ツールの説明",
  inputSchema: z.object({
    input: z.string().describe("入力説明"),
  }),
  outputSchema: z.object({
    result: z.string(),
  }),
  execute: async ({ context }) => {
    return { result: `処理結果: ${context.input}` };
  },
});
```

### API連携ツール

```typescript
export const apiTool = createTool({
  id: "api-tool",
  description: "外部API連携",
  inputSchema: z.object({
    query: z.string(),
  }),
  execute: async ({ context, runtimeContext }) => {
    const apiKey = runtimeContext.get("api-key");
    
    const response = await fetch("https://api.example.com/data", {
      headers: { "Authorization": `Bearer ${apiKey}` },
      method: "POST",
      body: JSON.stringify({ query: context.query }),
    });
    
    if (!response.ok) {
      throw new Error(`API Error: ${response.statusText}`);
    }
    
    return await response.json();
  },
});
```

## 🔄 ワークフロー

### 基本ワークフロー

```typescript
import { createWorkflow, createStep } from "@mastra/core/workflows";

const step1 = createStep({
  id: "step-1",
  inputSchema: z.object({ input: z.string() }),
  outputSchema: z.object({ output: z.string() }),
  execute: async ({ inputData }) => {
    return { output: `処理済み: ${inputData.input}` };
  },
});

export const myWorkflow = createWorkflow({
  id: "my-workflow",
  inputSchema: z.object({ input: z.string() }),
  outputSchema: z.object({ output: z.string() }),
  steps: [step1],
})
  .then(step1)
  .commit();
```

### 並列実行

```typescript
workflow
  .then(initialStep)
  .parallel([step2, step3])  // step2とstep3を並列実行
  .then(finalStep)
  .commit();
```

### 条件分岐

```typescript
workflow
  .then(checkStep)
  .branch([
    [async ({ inputData }) => inputData.type === "A", stepA],
    [async ({ inputData }) => inputData.type === "B", stepB],
  ])
  .then(mergeStep)
  .commit();
```

### データマッピング

```typescript
workflow
  .then(step1)
  .map({
    newField: { step: step1, path: "oldField" },
    constant: { value: "固定値", schema: z.string() },
    fromInit: { initData: workflow, path: "initialValue" },
  })
  .then(step2)
  .commit();
```

## 📝 型定義

### 基本スキーマ

```typescript
import { z } from "zod";

// 基本的な型
const StringSchema = z.string().describe("文字列の説明");
const NumberSchema = z.number().min(0).max(100);
const BooleanSchema = z.boolean().default(false);

// オブジェクト
const UserSchema = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string().email(),
  age: z.number().optional(),
});

// 配列
const UsersSchema = z.array(UserSchema);

// Enum
const StatusSchema = z.enum(["pending", "active", "inactive"]);

// Union
const ResponseSchema = z.union([
  z.object({ success: z.literal(true), data: z.any() }),
  z.object({ success: z.literal(false), error: z.string() }),
]);
```

### ランタイムコンテキスト型

```typescript
export type MyRuntimeContext = {
  "user-id": string;
  "api-key": string;
  "debug-mode": boolean;
  "language": "ja" | "en";
};

// 使用例
const runtimeContext = new RuntimeContext<MyRuntimeContext>();
runtimeContext.set("user-id", "user123");
runtimeContext.set("language", "ja");
```

## 🏗️ Mastraインスタンス

### 基本設定

```typescript
import { Mastra } from "@mastra/core";
import { PinoLogger } from "@mastra/loggers";
import { LibSQLStore } from "@mastra/libsql";

export const mastra = new Mastra({
  agents: { myAgent },
  workflows: { myWorkflow },
  storage: new LibSQLStore({ url: ":memory:" }),
  logger: new PinoLogger({ name: "App", level: "info" }),
});
```

### サーバー付き設定

```typescript
export const mastra = new Mastra({
  agents: { myAgent },
  server: {
    host: "0.0.0.0",
    port: 4111,
    middleware: [
      async (c, next) => {
        console.log(`${c.req.method} ${c.req.url}`);
        await next();
      },
    ],
    apiRoutes: [
      {
        path: "/api/custom",
        method: "POST",
        createHandler: async ({ mastra }) => (c) => {
          const body = await c.req.json();
          return c.json({ received: body });
        },
      },
    ],
  },
});
```

## 🧪 テスト

### エージェントテスト

```typescript
import { describe, it, expect } from "@jest/globals";

describe("MyAgent", () => {
  it("should respond correctly", async () => {
    const result = await myAgent.generate("テスト質問");
    expect(result.text).toBeDefined();
    expect(result.text.length).toBeGreaterThan(0);
  });
});
```

### ワークフローテスト

```typescript
describe("MyWorkflow", () => {
  it("should complete successfully", async () => {
    const run = myWorkflow.createRun();
    const result = await run.start({
      inputData: { input: "テストデータ" },
    });
    
    expect(result.status).toBe("success");
    expect(result.result).toBeDefined();
  });
});
```

## 🛠️ 開発コマンド

```bash
# 開発サーバー起動
npx mastra dev

# ビルド
npx mastra build

# 型チェック
npx tsc --noEmit

# テスト実行
npx jest

# ログ確認（開発時）
tail -f logs/mastra.log
```

## 🚨 エラーハンドリング

### カスタムエラークラス

```typescript
export class MastraAppError extends Error {
  constructor(
    message: string,
    public readonly code: string,
    public readonly context?: Record<string, any>
  ) {
    super(message);
    this.name = "MastraAppError";
  }
}

// 使用例
throw new MastraAppError(
  "GitLab API接続エラー",
  "GITLAB_CONNECTION_ERROR",
  { projectId: "123", statusCode: 403 }
);
```

### ツールでのエラーハンドリング

```typescript
export const safeTool = createTool({
  id: "safe-tool",
  description: "安全なツール",
  inputSchema: z.object({ input: z.string() }),
  execute: async ({ context }) => {
    try {
      // リスクのある処理
      const result = await riskyOperation(context.input);
      return { success: true, data: result };
    } catch (error) {
      console.error("Tool execution failed:", error);
      return { 
        success: false, 
        error: error instanceof Error ? error.message : "Unknown error" 
      };
    }
  },
});
```

## 📊 ログ設定

### 構造化ログ

```typescript
import { PinoLogger } from "@mastra/loggers";

export const logger = new PinoLogger({
  name: "MyApp",
  level: "info",
  formatters: {
    log: (object) => ({
      ...object,
      timestamp: new Date().toISOString(),
      service: "requirement-automation",
    }),
  },
});

// 使用例
logger.info("Workflow started", { workflowId: "abc123" });
logger.error("Process failed", { error: error.message, context });
```

## 🔍 デバッグ

### 実行状況確認

```typescript
// ワークフロー実行の監視
const run = workflow.createRun();

run.watch((event) => {
  console.log("ワークフロー状態:", event.payload.workflowState.status);
  if (event.payload.currentStep) {
    console.log("現在のステップ:", event.payload.currentStep.id);
  }
});

const result = await run.start({ inputData: { ... } });
```

### エージェント実行状況

```typescript
const result = await agent.generate("質問", {
  maxSteps: 5,
  onStepFinish: ({ text, toolCalls, toolResults }) => {
    console.log("ステップ完了:", { text, toolCalls, toolResults });
  },
});
```

## 📱 MCP (Model Context Protocol)

### MCPクライアント

```typescript
import { MCPClient } from "@mastra/mcp";

const mcp = new MCPClient({
  servers: {
    filesystem: {
      command: "npx",
      args: ["-y", "@modelcontextprotocol/server-filesystem", "/path"],
    },
    weather: {
      url: new URL("http://localhost:8080/mcp"),
    },
  },
});

// 静的ツール取得
const tools = await mcp.getTools();

// 動的ツール取得
const toolsets = await mcp.getToolsets();
```

### MCPサーバー

```typescript
import { MCPServer } from "@mastra/mcp";

const server = new MCPServer({
  name: "My MCP Server",
  version: "1.0.0",
  tools: { myTool },
  agents: { myAgent },  // ask_myAgent として公開
  workflows: { myWorkflow },  // run_myWorkflow として公開
});

// stdio で起動
await server.startStdio();
```

## 🔧 よく使用される設定

### package.json scripts

```json
{
  "scripts": {
    "dev": "mastra dev",
    "build": "mastra build",
    "start": "node dist/index.js",
    "test": "jest",
    "test:watch": "jest --watch",
    "type-check": "tsc --noEmit",
    "lint": "eslint src/**/*.ts",
    "format": "prettier --write src/**/*.ts"
  }
}
```

### tsconfig.json

```json
{
  "compilerOptions": {
    "target": "ES2022",
    "module": "ES2022",
    "moduleResolution": "bundler",
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "strict": true,
    "skipLibCheck": true,
    "outDir": "dist"
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "dist", ".mastra"]
}
```

## 🐛 トラブルシューティング

### よくあるエラー

| エラー | 原因 | 解決方法 |
|--------|------|----------|
| `Agent not found` | エージェントがMastraインスタンスに登録されていない | `mastra.agents` に追加 |
| `Tool schema validation failed` | ツールの入力スキーマが不正 | Zodスキーマを確認 |
| `Workflow step type mismatch` | ステップ間の型が一致しない | `inputSchema` と `outputSchema` を確認 |
| `Memory context required` | メモリ使用時に `resourceId` 未指定 | `generate()` に `resourceId` と `threadId` を追加 |

### パフォーマンス最適化

```typescript
// 並列実行の活用
workflow.parallel([step1, step2, step3])

// 適切なモデル選択
const model = complexity === "high" ? openai("gpt-4o") : openai("gpt-4o-mini");

// ツールのタイムアウト設定
const response = await fetch(url, { 
  signal: AbortSignal.timeout(30000) 
});
```

---

このクイックリファレンスを手元に置いて、効率的なMastra開発を進めてください！ 