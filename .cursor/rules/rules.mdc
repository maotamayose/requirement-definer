---
description: 
globs: 
alwaysApply: true
---
# TypeScript/AI開発統合ルール

## 🎯 開発原則
**目的**: 高品質で保守性の高いTypeScript/AI アプリケーションの開発  
**ゴール**: 堅牢で拡張性があり、テスト可能なコードベースの構築  

## 🔧 基本行動原則（MUST）
- 既存機能や意図された動作を壊さない
- 生成・修正するコードの保守性・可読性・堅牢性を常に意識
- 不明点は必ずユーザーに確認・相談する
- エラー修正・提案内容はユーザーに明確かつ簡潔に報告
- ルール違反や疑問が生じた場合は最優先でエスカレーション

## 💻 TypeScript開発ガイドライン

### 型定義・コーディング
- **厳格な型定義**: `any`型は極力避ける（使用時は理由明記）
- **インターフェース優先**: 継承よりコンポジションを活用
- **非同期処理**: Promiseベースで実装
- **null安全性**: 適切なnull/undefinedチェックを実装

### 命名規則
- クラス名: `PascalCase` (例: `DataProcessor`)
- 変数・関数名: `camelCase` (例: `processData`)
- 定数名: `UPPER_SNAKE_CASE` (例: `MAX_RETRY_COUNT`)
- インターフェース名: 接頭辞「I」なし (例: `UserRepository`)

### コード品質
- 1ファイル最大300行、1関数最大50行
- 公開API・クラスにはJSDoc形式コメント必須
- TODO/FIXMEには担当者・チケット番号記載
- 単一責任の原則に従いクラス設計

## 📁 推奨プロジェクト構造

```
├── src/
│   ├── core/           # コアビジネスロジック
│   ├── services/       # 外部サービス連携
│   ├── utils/          # ユーティリティ関数
│   ├── types/          # 型定義
│   ├── config/         # 設定管理
│   └── index.ts        # エントリーポイント
├── tests/              # テストファイル
├── docs/               # ドキュメント
└── scripts/            # ビルド・デプロイスクリプト
```

## 🚨 エラーハンドリング戦略

### 修正指針
1. **根本原因の特定**: `@ts-ignore`や`any`型での表面的解決は避ける
2. **型安全性の確保**: 既存ライブラリの型定義・ユーティリティを積極活用
3. **影響範囲の確認**: 修正内容と影響を明確に説明

### エラー検出・記録プロセス
- 新規作成・変更時は `npx tsc --noEmit` で型エラー検出必須
- エラー発生時は原因・箇所・修正方針を適切に記録
- 解決済みの場合も記録を残す

## 📝 ドキュメント同期ルール
- `.ts`ファイル編集時、関連ドキュメントも確認・更新
- 公開API・クラス・関数にはJSDoc形式コメント必須
- 複雑なロジックには実装理由を記載

## 📖 TSDoc記述ルール

### 必須要件
- **全ての公開関数・クラス・インターフェース**: TSDocコメント必須
- **複雑な内部関数**: 実装理由を含むコメント必須
- **型定義・スキーマ**: 用途と制約を明記

### TSDoc構文規則
```typescript
/**
 * 関数・クラスの簡潔な説明（1行目）
 * 
 * より詳細な説明がある場合は空行の後に記述。
 * 複数行にわたって詳細な動作、制約、注意点を説明する。
 * 
 * @param paramName - パラメータの説明（型は自動推論されるため省略）
 * @param options - オプション設定（デフォルト値がある場合は記載）
 * @returns 戻り値の説明
 * @throws エラー条件とエラー内容
 * 
 * @example
 * ```typescript
 * const result = functionName(param1, { option: true });
 * console.log(result); // 期待される出力
 * ```
 * 
 * @since バージョン情報（新機能の場合）
 * @deprecated 非推奨の理由と代替案（非推奨の場合）
 */
```

### 記述内容ガイドライン

#### 1. 関数・メソッド
- **目的**: 何をするかを明確に
- **入力**: パラメータの意味と制約
- **出力**: 戻り値の形式と内容
- **副作用**: ファイル操作、状態変更など
- **エラー**: 発生条件と対処方法
- **実用例**: 典型的な使用パターン

#### 2. クラス
- **責務**: クラスの役割と責任範囲
- **使用場面**: どのような状況で使用するか
- **ライフサイクル**: インスタンス化から破棄まで
- **状態管理**: 内部状態の変更タイミング
- **関連クラス**: 依存関係や連携クラス

#### 3. インターフェース・型定義
- **用途**: どのような場面で使用するか
- **制約**: 型制約や値の範囲
- **拡張性**: 将来の拡張予定
- **互換性**: 他の型との関係

#### 4. 複雑なロジック
- **アルゴリズム**: 採用したアルゴリズムと理由
- **パフォーマンス**: 計算量や性能特性
- **トレードオフ**: 設計上の判断理由
- **参考資料**: 外部リンクや論文

### コード例テンプレート

#### 基本関数
```typescript
/**
 * ユーザーデータを検証し、正規化する
 * 
 * 入力されたユーザーデータの必須フィールドチェック、
 * 形式の正規化、セキュリティチェックを行います。
 * 
 * @param userData - 検証対象のユーザーデータ
 * @param options - 検証オプション（strict: 厳密モード）
 * @returns 正規化されたユーザーデータ
 * @throws ValidationError 必須フィールド不足時
 * @throws SecurityError 不正な入力値検出時
 * 
 * @example
 * ```typescript
 * const validUser = validateUser({
 *   name: "山田太郎",
 *   email: "yamada@example.com"
 * }, { strict: true });
 * ```
 */
```

#### クラス
```typescript
/**
 * ドキュメント管理のための中央制御クラス
 * 
 * REQUIREMENT ディレクトリの構造管理、ドキュメントの
 * CRUD操作、インデックス管理を統合的に提供します。
 * 
 * @example
 * ```typescript
 * const manager = new DocumentManager("./REQUIREMENT");
 * await manager.initialize();
 * const doc = await manager.createDocument({...});
 * ```
 */
```

#### 複雑なアルゴリズム
```typescript
/**
 * コード複雑度を計算する（サイクロマティック複雑度）
 * 
 * McCabe のサイクロマティック複雑度を基に、
 * TypeScript/JavaScript の制御構造を解析します。
 * 
 * アルゴリズム: E - N + 2P
 * - E: エッジ数（分岐の数）
 * - N: ノード数（ステートメントの数）  
 * - P: 強連結成分の数（通常は1）
 * 
 * @param sourceCode - 解析対象のソースコード
 * @returns 複雑度スコア（1-10: 低, 11-20: 中, 21+: 高）
 * 
 * @see https://en.wikipedia.org/wiki/Cyclomatic_complexity
 */
```

### 品質チェック項目
- [ ] 全ての公開API にTSDocコメントがある
- [ ] パラメータ・戻り値の説明が明確
- [ ] 実用的なコード例が含まれている
- [ ] エラー条件が文書化されている  
- [ ] 複雑なロジックの実装理由が説明されている
- [ ] 外部依存やAPI呼び出しが明記されている
- [ ] 非推奨機能に適切な代替案がある

### 自動化ツール連携
```bash
# TSDoc構文チェック
npx tsc --noEmit  # 型チェックと同時に実行

# ドキュメント生成
npx typedoc src/ --out docs/

# TSDoc品質チェック（将来の拡張）
npx tsdoc-linter src/**/*.ts
```

---
**重要**: TSDocは開発効率とコード品質向上の重要な要素です。
手を抜かず、将来の開発者（自分自身を含む）のために丁寧に記述してください。

## 🔒 セキュリティ要件
- **機密情報管理**: APIキー・トークンは環境変数で管理、ハードコード禁止
- **入力値検証**: 外部入力は必ず検証・サニタイズ
- **認証・認可**: 適切な認証メカニズムの実装
- **ロギング**: 個人情報・機密情報はマスキング、適切なログレベル設定

## 🧪 テスト戦略
- **コード変更時**: 関連する単体テスト・統合テスト作成・実行必須
- **カバレッジ目標**: コアロジック80%以上、統合部分70%以上
- **外部依存**: モック化でテスト安定性・独立性確保
- **テスト種別**: 単体（Jest）、統合、E2E

## 🤖 AI開発特有ルール
- **プロンプト管理**: バージョン管理とテンプレート化
- **モデル選択**: 用途に応じた適切なモデルの選択
- **レスポンス検証**: AI応答の妥当性チェック機能実装
- **コスト意識**: API呼び出し回数・トークン使用量の最適化

## ⚡ 実行優先順位
1. 機能要件の実現
2. 既存機能の保護・品質維持
3. エラー検出・修正・記録
4. ドキュメント同期・更新
5. テスト作成・実行

## 🎯 フェーズ1実装管理（AI自動適用）

### フェーズ1専用ルール（AI必須参照）
- **実装ガイド**: [phase1-implementation-guide.mdc](mdc:phase1-implementation-guide.mdc)
- **品質基準**: [phase1-quality-standards.mdc](mdc:phase1-quality-standards.mdc)
- **進捗管理**: [phase1-progress-management.mdc](mdc:phase1-progress-management.mdc)
- **開発ルール**: [phase1-development-rules.mdc](mdc:phase1-development-rules.mdc)

### AIタスク管理責任
```typescript
// AI実行必須項目
interface AIPhase1Responsibilities {
  taskValidation: boolean;     // タスク開始前の依存関係チェック
  qualityGate: boolean;        // 品質基準の自動チェック
  progressTracking: boolean;   // 進捗の自動更新
  riskDetection: boolean;      // リスク・ブロッカーの早期発見
  evidenceCollection: boolean; // エビデンスの自動収集
  reportGeneration: boolean;   // 日次・週次レポート生成
}

// フェーズ1完了まで必須適用
const phase1Rules = {
  enforceQualityGates: true,
  blockProgressOnFailure: true,
  autoGenerateReports: true,
  escalateBlockers: true
};
```

---
**重要**: このルールは全ての開発タスクで必ず遵守すること。フェーズ1期間中は追加ルールが自動適用される。 