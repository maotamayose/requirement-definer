---
description: フェーズ1の開発
globs: 
alwaysApply: false
---
# フェーズ1実装ガイド（AIルール）

## 📋 概要
第一フェーズの実装計画と管理指針。AIはこのルールに基づいてタスクの進行をサポートし、品質を保証する。

## 🎯 実装対象フロー
```
ユーザー → Google Chat → Backend → Claude → GitLab → DB
1. 機能要望投稿 → 2. Webhook通知 → 3. ワークフロー記録 → 4. 要件定義生成 → 5. MR作成 → 6. 状態更新 → 7. 通知
```

## 📝 タスク構成と優先順序

### Phase 1.1: 基盤インフラ構築（優先度：最高）
**1.1.1 プロジェクト初期設定とデータベース設計**
- 見積: 2-3時間 | 依存: なし
- 成果物: WorkflowRepositoryクラス、CRUD操作、単体テスト
- 品質基準: テストカバレッジ80%以上、TypeScript strict mode

**1.1.2 Google Chat Webhook エンドポイント実装**  
- 見積: 3-4時間 | 依存: 1.1.1
- 成果物: Webhookエンドポイント、メッセージパーサー、統合テスト
- 重要: 認証設定に注意、エラーハンドリング必須

### Phase 1.2: AI要件定義生成（優先度：高）
**1.2.1 Claude API連携とRAG基盤実装**
- 見積: 4-5時間 | 依存: 1.1.1  
- 成果物: Claude APIクライアント、要件定義エージェント、プロンプトテンプレート
- 重要: API制限とコスト管理

**1.2.2 RAGシステムの実装**
- 見積: 3-4時間 | 依存: 1.2.1
- 成果物: RAG検索ツール、ドキュメントインデックス、品質評価
- 重要: 検索精度の測定と改善

### Phase 1.3: GitLab連携（優先度：高）
**1.3.1 GitLab API連携実装**
- 見積: 3-4時間 | 依存: なし
- 成果物: GitLab APIクライアント、MR作成ツール、統合テスト
- 重要: API認証とエラーハンドリング

**1.3.2 MR作成ワークフロー統合**
- 見積: 2-3時間 | 依存: 1.3.1, 1.2.1
- 成果物: MR作成ワークフロー、ブランチ管理、統合テスト
- 重要: ブランチ衝突の処理

### Phase 1.4: システム統合（優先度：最高）
**1.4.1 全体ワークフロー統合**
- 見積: 4-5時間 | 依存: 全ての前タスク
- 成果物: メインワークフロー、統合エラーハンドリング、E2Eテスト
- 重要: 全フローの動作確認

**1.4.2 Google Chat通知機能実装**
- 見積: 2-3時間 | 依存: 1.4.1
- 成果物: Chat通知ツール、メッセージテンプレート、統合テスト
- 重要: スレッド管理とメッセージ形式

## 🔧 必須実装要件

### TypeScript品質基準（MUST）
```typescript
// 厳格モード必須
interface WorkflowRecord {
  id: string;
  status: 'defining' | 'reviewing' | 'approved' | 'rejected' | 'implementing';
  originalRequest: string;
  chatThreadId: string;
  userId: string;
  generatedRequirement?: string;
  gitlabMrUrl?: string;
  gitlabMrId?: string;
  createdAt: Date;
  updatedAt: Date;
  metadata?: Record<string, any>;
}

// エラーハンドリング必須
class ApplicationError extends Error {
  constructor(
    message: string,
    public readonly code: string,
    public readonly context?: Record<string, any>
  ) {
    super(message);
    this.name = "ApplicationError";
  }
}
```

### テスト要件（MUST）
- 単体テストカバレッジ: 80%以上
- 統合テスト: 主要フロー網羅
- E2Eテスト: 完全フロー確認
- パフォーマンステスト: API応答3秒以内

### セキュリティ要件（MUST）
- APIキー環境変数管理
- 入力値検証・サニタイゼーション
- 機密情報ログ出力禁止
- HTTPS通信強制

## 🚨 AIサポート指針

### タスク開始時のAIアクション
1. **依存関係確認**: 前提タスクの完了状況をチェック
2. **環境準備支援**: 必要な設定・ライブラリの確認
3. **実装方針提示**: 具体的な実装手順の提案
4. **テスト戦略**: テストケースの設計支援

### 実装中のAIサポート
1. **コード品質チェック**: TypeScript strict mode、ESLint準拠
2. **テスト実装支援**: 単体・統合テストの作成
3. **エラーハンドリング**: 適切な例外処理の実装
4. **ドキュメント生成**: TSDocコメントの品質確保

### 完了時のAI検証
1. **品質基準確認**: チェックリストに基づく検証
2. **エビデンス収集**: テスト結果・動作確認の記録
3. **進捗更新**: 実装状況の更新と次タスクの準備
4. **学習記録**: 発見した課題・改善点の記録

## 📊 品質ゲート（AI自動チェック）

### 必須クリア条件
- [ ] TypeScript厳格モード: エラー0件
- [ ] ESLint: 警告0件
- [ ] テストカバレッジ: 80%以上
- [ ] API応答時間: 3秒以内
- [ ] セキュリティ脆弱性: High/Critical 0件
- [ ] TSDocコメント: 公開API 100%

### 推奨クリア条件  
- [ ] テストカバレッジ: 90%以上
- [ ] API応答時間: 1秒以内
- [ ] サイクロマティック複雑度: 10以下
- [ ] コード重複: 5%以下

## 🔄 進捗管理ルール

### 日次チェック（AI実行）
- タスク進捗状況の確認
- ブロッカーの特定と対応策提案
- 品質メトリクスの測定
- 次日の作業計画策定

### 週次レビュー（AI支援）
- 完了タスクの品質確認
- 学習内容の整理と記録
- プロセス改善の提案
- リスク評価と対策

## 🎯 成功基準

### フェーズ完了条件
- [ ] 8つのタスクすべて完了
- [ ] E2Eテスト全パス
- [ ] 品質基準すべてクリア
- [ ] ドキュメント最新状態
- [ ] 本番デプロイ準備完了

### AI支援効果測定
- タスク完了時間の短縮率
- 品質問題の早期発見率
- コードレビュー指摘事項の削減
- ドキュメント品質の向上

---

**AIルール適用範囲**: 第一フェーズの全タスクでこのガイドに従って開発支援を行う。品質とスケジュールの両立を最優先とする。
